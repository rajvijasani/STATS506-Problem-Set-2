---
title: "Problem Set 2"
author: "Rajvi Jasani"
format: 
  html:
    toc: true
    embed-resources: true
  pdf: default
---
## GitHub Repository

This is the link to my GitHub repository <https://github.com/rajvijasani/STATS506-Problem-Set-2.git>

## Problem 1 - Dice Game

a. 
```{r}
#' Function to calculate total winnings version 1 (using a loop)
#'
#' @param n number of rolls
#' @param seed to control randomization (if a value is provided)
#'
#' @return total winnings
play_dice_v1 <- function(n, seed = NULL) {
  if (n < 0) {
    # checking for a negative input and showing appropriate error
    stop("number of rolls must be positive")
  }
  if (n == 0) {
    # if no die is rolled (game is not played), winnings=0
    return(0)
  }
  set.seed(seed)
  rolls <- sample(1:6, n, replace = TRUE)
  winnings <- 0
  
  for (i in rolls) {
    # -2 for the cost of a roll
    winnings <- winnings - 2
    if (i == 3 | i == 5) {
      winnings <- winnings + (i * 2)
    }
    # any other roll wins nothing
  }
  return(winnings)
}

#' Function to calculate total winnings version 2 (using vectorization)
#'
#' @param n number of rolls
#' @param seed to control randomization (if a value is provided)
#'
#' @return total winnings
play_dice_v2 <- function(n, seed = NULL) {
  if (n < 0) {
    # checking for a negative input and showing appropriate error
    stop("number of rolls must be positive")
  }
  if (n == 0) {
    # if no die is rolled (game is not played), winnings=0
    return(0)
  }
  set.seed(seed)
  rolls <- sample(1:6, n, replace = TRUE)
  winnings <- 0
  # desired_rolls is a logical vector which stores
  # TRUE if a roll is 3 or 5 and FALSE otherwise
  desired_rolls <- (rolls == 3 | rolls == 5)
  # multiplying each roll with corresponding logical value and 2
  # [TRUE->1; FALSE->0]
  # and subtracting cost of roll
  # if roll is 3, (3*1*2)-2=4
  # if roll is 6, (6*0*2)-2=-2
  winnings_per_roll <- rolls * desired_rolls * 2 - 2
  return(sum(winnings_per_roll))
}

#' Function to calculate total winnings version 3 (using table function)
#'
#' @param n number of rolls
#' @param seed to control randomization (if a value is provided)
#'
#' @return total winnings
play_dice_v3 <- function(n, seed = NULL) {
  if (n < 0) {
    # checking for a negative input and showing appropriate error
    stop("number of rolls must be positive")
  }
  if (n == 0) {
    # if no die is rolled (game is not played), winnings=0
    return(0)
  }
  set.seed(seed)
  rolls <- sample(1:6, n, replace = TRUE)
  winnings <- 0
  # collecting the frequencies of rolls in a table form
  # factor() is used to include levels which have frequency=0 in the table
  rolls_count <- table(factor(rolls, levels = c(1, 2, 3, 4, 5, 6)))
  # as.numeric is used to only extract the frequency from the table
  winnings <- as.numeric(rolls_count[3]) * 6 + as.numeric(rolls_count[5]) * 10 - n * 2
  return(winnings)
}

#' Function to calculate total winnings version 4 (using vapply function)
#'
#' @param n number of rolls
#' @param seed to control randomization (if a value is provided)
#'
#' @return total winnings
play_dice_v4 <- function(n, seed = NULL) {
  if (n < 0) {
    # checking for a negative input and showing appropriate error
    stop("number of rolls must be positive")
  }
  if (n == 0) {
    # if no die is rolled (game is not played), winnings=0
    return(0)
  }
  set.seed(seed)
  rolls <- sample(1:6, n, replace = TRUE)
  winnings <- 0
  # applying function to return winnings (except cost of roll) of each roll
  # on all samples in the rolls vector,
  # summing the winnings and subtracting the costs all of rolls
  winnings <- sum(vapply(rolls, function(i) {
    if (i == 3 | i == 5) {
      return(i * 2)
    }
    return(0)
  }, 1)) - (n * 2)
  return(winnings)
}
```
*Attribution of source for v3:* Used ChatGPT to find a function to get the frequencies for all levels (even if they are zero) AND to find a function to only extract the frequency (without the name of level)

b.

Version 1
```{r}
c(play_dice_v1(3), play_dice_v1(3000))
```
Version 2
```{r}
c(play_dice_v2(3), play_dice_v2(3000))
```
Version 3
```{r}
c(play_dice_v3(3), play_dice_v3(3000))
```
Version 4
```{r}
c(play_dice_v4(3), play_dice_v4(3000))
```

c.

Results for n = 3, seed = 223
```{r}
c(
  play_dice_v1(3, seed = 223),
  play_dice_v2(3, seed = 223),
  play_dice_v3(3, seed = 223),
  play_dice_v4(3, seed = 223)
)
```

Results for n = 3000, seed = 223
```{r}
c(
  play_dice_v1(3000, seed = 223),
  play_dice_v2(3000, seed = 223),
  play_dice_v3(3000, seed = 223),
  play_dice_v4(3000, seed = 223)
)
```

d.

Comparison of speeds with n = 1000
```{r}
library(microbenchmark)
microbenchmark(
  version1 = play_dice_v1(1000, seed = 223),
  version2 = play_dice_v2(1000, seed = 223),
  version3 = play_dice_v3(1000, seed = 223),
  version4 = play_dice_v4(1000, seed = 223)
)
```
We see that there is only a small difference in speeds of version 1 (loop) and version 3 (table). Version 4 (vapply) is the slowest whereas version 2 (vectorization) is the fastest as expected. 

Comparison of speeds with n = 100000
```{r}
microbenchmark(
  version1 = play_dice_v1(100000, seed = 223),
  version2 = play_dice_v2(100000, seed = 223),
  version3 = play_dice_v3(100000, seed = 223),
  version4 = play_dice_v4(100000, seed = 223)
)
```
As number of rolls increased, we can see a significant difference in speeds of version 1 (loop) and version 3 (table) which tells us that loops are not speed-wise efficient for big samples whereas tables, second fastest approach, can be useful for big samples. Version 4 (vapply) is still the slowest by a large margin whereas version 2 (vectorization) is the fastest as expected.

e. 

We will be running 3 simulations of 10000 trials each but with different number of rolls just to be sure that number of rolls does not affect the winnings drastically.
```{r}
# number of trials to run
trials <- 10000
# we will be running 3 different simulations with different number of rolls in each just to be sure
# vectors to save winning amounts (or losses) of each trail
all_winnings_1 <- vector(length = trials)
all_winnings_2 <- vector(length = trials)
all_winnings_3 <- vector(length = trials)
for (i in 1:trials) {
  # simulation with 10 rolls in each trial
  all_winnings_1[i] <- play_dice_v2(10)
  # simulation with 100 rolls in each trial
  all_winnings_2[i] <- play_dice_v2(100)
  # simulation with 1000 rolls in each trial
  all_winnings_3[i] <- play_dice_v2(1000)
}
c(mean(all_winnings_1),
  mean(all_winnings_2),
  mean(all_winnings_3))
```
Each simulation gives a positive mean, i.e. over 10000 trials of 10, 100, or 1000 rolls, the player tends to win money on average. This makes the game biased towards the player, thus unfair. A fair game should have an average around 0, i.e. no gain no loss.

## Problem 2 - Linear Regression

a.
```{r}
setwd("E:/UM/STATS 506/Repos/STATS506-Problem-Set-2")
# assigning new column names for the data frame
col_names <- c(
  "height",
  "length",
  "width",
  "driveline",
  "engine_type",
  "hybrid",
  "gears",
  "transmission",
  "city_mpg",
  "fuel_type",
  "highway_mpg",
  "classification",
  "id",
  "make",
  "model_year",
  "year",
  "horsepower",
  "torque"
)
# importing the data set
cars <- read.csv("data/cars.csv", col.names = col_names)
```

b.
```{r}
# number of observations before restricting the dataset
nrow(cars)
cars <- cars[cars$fuel_type == "Gasoline", ]
# number of observations before restricting the dataset
nrow(cars)
```
c.
```{r}
# exploratory data analysis to check if highway_mpg variable needs transformation
hist(cars$highway_mpg)
c(min(cars$highway_mpg), max(cars$highway_mpg))
library(e1071)
skewness(cars$highway_mpg)
tail(table(cars$highway_mpg))
```
From looking at the histogram, min-max values and skewness coefficient of the highway_mpg variable, I can notice that the distribution is skewed. After looking at the table of highway_mpg values I can understand that the maximum value is probably an outlier and unrealistic in a real-world case, but as the question does not mention if it is okay to remove this outlier, I am going to take it as a realistic value and remove the skewness by log transformation of the highway_mpg variable.
```{r}
# log transformation of highway_mpg
cars$log_highway_mpg <- log(cars$highway_mpg)
hist(cars$log_highway_mpg)
c(min(cars$log_highway_mpg), max(cars$log_highway_mpg))
```
*Attribution of source:* Used ChatGPT to find the library and function to calculate skewness.

d.
```{r}
# modeling a linear regression model
lm_model <- lm(log_highway_mpg ~ torque + horsepower + height + length +
                 width + as.factor(year),
               data = cars)
summary(lm_model)
```
The torque coefficient is -2.294e-03 with a near zero p-value. This means that torque has a strong, statistically significant, negative effect on highway mpg, i.e. as torque increases, highway mpg decreases.

e.
```{r}
library(emmeans)
# modeling a linear regression model with interaction term
int_lm_model <- lm(log_highway_mpg ~ torque * horsepower + height + length +
                     width + as.factor(year),
                   data = cars)
summary(int_lm_model)
```
To choose reasonable values of torque and horsepower, we can look at their histograms
```{r}
# to show 2 plots in one row
par(mfrow = c(1, 2))
hist(cars$torque)
hist(cars$horsepower)
```

Torque ranges from 150 to 450 approximately and I have taken horsepower values of 150, 250 and 350 as they cover the distribution of horsepower satisfactorily.
```{r}
# plotting the interaction between torque an horsepower
emmip(int_lm_model,
      horsepower ~ torque,
      at = list(
        torque = seq(150, 450, 100),
        horsepower = c(150, 250, 350)
      ))
```
We can see that for all the chosen horsepower values, the trend in change of torque is consistent. 

f.

$\hat{\beta} = (X^T X)^{-1} X^T y$

*Attribution of source:* Used ChatGPT for showing this formula on the doc.
```{r}
# preparing design matrix X for manual calculation of beta
X <- model.matrix(log_highway_mpg ~ torque * horsepower + height + length +
                    width + as.factor(year),
                  data = cars)
y <- cars$log_highway_mpg
beta_hat <- solve(t(X) %*% X) %*% t(X) %*% y
# combining lm coefficients and manual coefficients column-wise for ease of viewing
cbind(int_lm_model$coefficients, beta_hat)
```
We can see that we get the same values of coefficients from the manual calculation of beta hat (column 2) as we got from the lm model (column 1).